{"version":3,"file":"main.929dffee1dc82351b523.bundle.js","sources":["webpack:///./src/ContextMessage.jsx"],"sourcesContent":["import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types';\nexport const IOInputMessageContext = React.createContext({ set: () => {}, pool: {} })\n\n/** Collects the information for any child node of type IOInput */\nexport class MessageContext extends React.PureComponent {\n    static propTypes = {\n    }\n\n    state = {\n        pool: {}\n    }\n\n    setPool = (message = '', field) => {\n        const { pool } = this.state\n        if (field) {\n            this.setState({ pool: { ...pool, [field]: message } })\n        }\n    }\n\n    render() {\n        const { pool } = this.state\n        return (\n            <IOInputMessageContext.Provider value={{ set: this.setPool, pool: { ...pool }}}>\n                {this.props.children}\n            </IOInputMessageContext.Provider>\n        )\n    }\n}\n/** Message Holder for the Messages */\nexport const IOInputMessage = (props) => (\n    <IOInputMessageContext.Consumer>\n        { context =>\n            <Fragment>\n                {props.text ? (context.pool[props.for] || '') : <label className=\"iof-message\">{context.pool[props.for] || ''}</label>}\n            </Fragment>\n        }\n    </IOInputMessageContext.Consumer>\n)\n\nIOInputMessage.propTypes = {\n    /** Name of the input which this label will be linked to */\n    'for': PropTypes.string.isRequired,\n    /** Name of the prop that indicates to render the text as a simple text node. */\n    text: PropTypes.bool\n}\n\nIOInputMessage.defaultProps = {\n    text: false\n}"],"mappings":"AAEA","sourceRoot":""}