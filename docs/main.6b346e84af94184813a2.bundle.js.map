{"version":3,"file":"main.6b346e84af94184813a2.bundle.js","sources":["webpack:///./src/ContextMessage.jsx"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nexport const IOInputMessageContext = React.createContext({ set: () => {}, pool: {} })\n\n/** Collects the information for any child node of type IOInput */\nexport class MessageContext extends React.PureComponent {\n    \n\n    registry = {}\n\n    dispatch = (message = '', field) => {\n        const reg = this.registry[field]\n        if (reg) {\n            Object.values(reg).forEach(setter => setter(message))\n        }\n    }\n\n    subscribe = (field, uuid, setter) => {\n        if (!this.registry[field]) {\n            this.registry[field] = {}\n        }\n        this.registry[field][uuid] = setter\n    }\n\n    unsubscribe = (field, uuid) => {\n        delete this.registry[field][uuid]\n    }\n\n    render() {\n        return (\n            <IOInputMessageContext.Provider value={{ subscribe: this.subscribe, unsubscribe: this.unsubscribe, dispatch: this.dispatch }}>\n                {this.props.children}\n            </IOInputMessageContext.Provider>\n        )\n    }\n}\n/** Message Holder for the Messages */\nexport class IOInputMessage extends React.PureComponent {\n\n    static contextType = IOInputMessageContext;\n    _identifier = null\n    state={ message: '' }\n\n    constructor(props) {\n        super(props)\n\n        this._identifier = `${props.for}_${(new Date()).getTime()}_${Math.round(Math.random()*10000)}`\n    }\n\n    componentDidMount() {\n        this.context.subscribe(this.props.for, this._identifier, this.setter)\n    }\n\n    componentWillUnmount() {\n        this.context.unsubscribe(this.props.for, this._identifier)\n    }\n\n    setter = (message) => {\n        this.setState({ message })\n    }\n\n    render() {\n        const { message } = this.state\n        const { text } = this.props\n        return (\n            <>\n                {text ? (message || '') : <label className=\"iof-message\">{message || ''}</label>}\n            </>\n        )\n    }\n}\n\n\n// export const IOInputMessage = (props) => (\n//     <IOInputMessageContext.Consumer>\n//         { context =>\n//             <Fragment>\n//                 {props.text ? (context.pool[props.for] || '') : <label className=\"iof-message\">{context.pool[props.for] || ''}</label>}\n//             </Fragment>\n//         }\n//     </IOInputMessageContext.Consumer>\n// )\n\nIOInputMessage.propTypes = {\n    /** Name of the input which this label will be linked to */\n    'for': PropTypes.string.isRequired,\n    /** Name of the prop that indicates to render the text as a simple text node. */\n    text: PropTypes.bool\n}\n\nIOInputMessage.defaultProps = {\n    text: false\n}\n"],"mappings":"AAEA","sourceRoot":""}